<?php defined('SYSPATH') OR die('No direct script access.'); ?>

2016-08-22 15:39:25 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (12059, '#include\"iostream\"\n#include\"algorithm\"\n#include\"vector\"\n#include\"cmath\"\nusing namespace std;\nint len1;\nint len2;\nstruct Point\n{\n    double x;\n    double y;\n    bool operator= t6)\n            {\n                temp2.x = (p.x + q.x) / 2;\n                temp2.y = (p.y + q.y) / 2;\n                distance2_temp = dist2(p, q) / 2;\n            }\n            else\n            {\n                if (t5 >= t4 && t5 >= t6)\n                {\n                    temp2.x = (P2[i].x + q.x) / 2;\n                    temp2.y = (P2[i].y + q.y) / 2;\n                    distance2_temp = dist2(P2[i], q) / 2;\n                }\n                else\n                {\n                    temp2.x = (P2[i].x + p.x) / 2;\n                    temp2.y = (P2[i].y + p.y) / 2;\n                    distance2_temp = dist2(P2[i], p) / 2;\n                }\n            }\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_One(Point p,int n)\n{\n    temp.x = (p.x+P1[0].x)/2;\n    temp.y = (p.y+P1[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_One(p,P1[j],j-1);\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_Two(Point p,int n)\n{\n    temp2.x = (p.x+P2[0].x)/2;\n    temp2.y = (p.y+P2[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_Two(p,P2[j],j-1);\n        }\n    }\n}\n\n\n//typedef vector Convex;\n/*int sgn(double d)\n{\n    if(d0)\n            {\n                return 1;\n            }\n        }\n    }\n}*/\n\nvoid convex_hull(Point *p,Point *ch,int n,int &len)\n{\n    sort(p, p+n);\n    ch[0]=p[0];\n    ch[1]=p[1];\n    int top=1;\n    for(int i=2; i0&&cross(ch[top],p[i],ch[top-1])=0; i--)\n    {\n        while(top>tmp&&cross(ch[top],p[i],ch[top-1]) dist2(ch[p+1],ch[q+1]))\n        {\n            if(ans < dist2(ch[p],ch[q]))\n            {\n                ans = dist2(ch[p],ch[q]);\n                middle.x = (ch[p].x + ch[q].x)/2;\n                middle.y = (ch[p].y + ch[q].y)/2;\n            }\n        }\n        else\n        {\n            if(ans < dist2(ch[p+1],ch[q+1]))\n            {\n                ans = dist2(ch[p+1],ch[q+1]);\n                middle.x = (ch[p+1].x + ch[q+1].x)/2;\n                middle.y = (ch[p+1].y + ch[q+1].y)/2;\n            }\n        }\n    }\n    return ans;\n}\n\ndouble multi(Point p1,Point p2,Point p0)\n{\n    return (p1.x-p0.x) * (p2.y-p0.y) - (p2.x-p0.x) * (p1.y-p0.y);\n}\n\n/*-------------------------------------------------------------------------------*/\n\n\n\n/*---------------------------------------------------------------------------------*/\n\n/*bool Intersect(int n,int m)\n{\n    for(int i=0;i= min(P1[i].x,P1[i+1].x))\n             &&(max(P1[i].y,P1[i+1].y) >= min(P2[i].y,P2[i+1].y))&&(max(P2[i].y,P2[i+1].y) >= min(P1[i].y,P1[i+1].y))\n             &&(multi(P2[i],P1[i+1],P1[i]) * multi(P1[i+1],P2[i+1],P1[i]) >=0)\n             &&(multi(P1[i],P2[i+1],P2[i]) * multi(P2[i+1],P1[i+1],P2[i]) >=0)\n            if(!(max(P1[i].x,P1[i+1].x) >= min(P2[i].x,P2[i+1].x))||!(max(P2[i].x,P2[i+1].x) >= min(P1[i].x,P1[i+1].x))\n             ||!(max(P1[i].y,P1[i+1].y) >= min(P2[i].y,P2[i+1].y))||!(max(P2[i].y,P2[i+1].y) >= min(P1[i].y,P1[i+1].y))\n             ||!(multi(P2[i],P1[i+1],P1[i]) * multi(P1[i+1],P2[i+1],P1[i]) >=0)\n             ||!(multi(P1[i],P2[i+1],P2[i]) * multi(P2[i+1],P1[i+1],P2[i]) >=0))\n            {\n                return false;\n            }\n        }\n    }\n}*/\n\nbool Compl_inside_convex(const Point & p,Point *con,int n)\n{\n    //if(n-eps) return false;\n    //if(cross(con[0],p,con[n-1])1;\n        if(cross(con[0],p,con[mid])>-eps)\n        {\n            line=mid;\n            j=mid-1;\n        }\n        else i=mid+1;\n    }\n    return cross(con[line-1],p,con[line])>n>>m;\n    //int temp1,temp2;\n    for(int i=0; i>P1[i].x>>P1[i].y;\n        //P1[i].x = temp1;\n        //P1[i].y = temp2;\n    }\n    for(int i=0; i>temp1>>temp2;\n        cin>>P2[i].x>>P2[i].y;\n        //P2[i].x = temp1;\n        //P2[i].y = temp2;\n    }\n    convex_hull(P1,P3,n,len1);\n    convex_hull(P2,P4,m,len2);\n    /*if(Intersect(n,m))\n    {\n        cout ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 15:39:25 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 15:39:53 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (12060, '#include\"iostream\"\n#include\"algorithm\"\n#include\"vector\"\n#include\"cmath\"\nusing namespace std;\nint len1;\nint len2;\nstruct Point\n{\n    double x;\n    double y;\n    bool operator= t6)\n            {\n                temp2.x = (p.x + q.x) / 2;\n                temp2.y = (p.y + q.y) / 2;\n                distance2_temp = dist2(p, q) / 2;\n            }\n            else\n            {\n                if (t5 >= t4 && t5 >= t6)\n                {\n                    temp2.x = (P2[i].x + q.x) / 2;\n                    temp2.y = (P2[i].y + q.y) / 2;\n                    distance2_temp = dist2(P2[i], q) / 2;\n                }\n                else\n                {\n                    temp2.x = (P2[i].x + p.x) / 2;\n                    temp2.y = (P2[i].y + p.y) / 2;\n                    distance2_temp = dist2(P2[i], p) / 2;\n                }\n            }\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_One(Point p,int n)\n{\n    temp.x = (p.x+P1[0].x)/2;\n    temp.y = (p.y+P1[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_One(p,P1[j],j-1);\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_Two(Point p,int n)\n{\n    temp2.x = (p.x+P2[0].x)/2;\n    temp2.y = (p.y+P2[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_Two(p,P2[j],j-1);\n        }\n    }\n}\n\n\n//typedef vector Convex;\n/*int sgn(double d)\n{\n    if(d0)\n            {\n                return 1;\n            }\n        }\n    }\n}*/\n\nvoid convex_hull(Point *p,Point *ch,int n,int &len)\n{\n    sort(p, p+n);\n    ch[0]=p[0];\n    ch[1]=p[1];\n    int top=1;\n    for(int i=2; i0&&cross(ch[top],p[i],ch[top-1])=0; i--)\n    {\n        while(top>tmp&&cross(ch[top],p[i],ch[top-1]) dist2(ch[p+1],ch[q+1]))\n        {\n            if(ans < dist2(ch[p],ch[q]))\n            {\n                ans = dist2(ch[p],ch[q]);\n                middle.x = (ch[p].x + ch[q].x)/2;\n                middle.y = (ch[p].y + ch[q].y)/2;\n            }\n        }\n        else\n        {\n            if(ans < dist2(ch[p+1],ch[q+1]))\n            {\n                ans = dist2(ch[p+1],ch[q+1]);\n                middle.x = (ch[p+1].x + ch[q+1].x)/2;\n                middle.y = (ch[p+1].y + ch[q+1].y)/2;\n            }\n        }\n    }\n    return ans;\n}\n\ndouble multi(Point p1,Point p2,Point p0)\n{\n    return (p1.x-p0.x) * (p2.y-p0.y) - (p2.x-p0.x) * (p1.y-p0.y);\n}\n\n/*-------------------------------------------------------------------------------*/\n\n\n\n/*---------------------------------------------------------------------------------*/\n\n/*bool Intersect(int n,int m)\n{\n    for(int i=0;i= min(P1[i].x,P1[i+1].x))\n             &&(max(P1[i].y,P1[i+1].y) >= min(P2[i].y,P2[i+1].y))&&(max(P2[i].y,P2[i+1].y) >= min(P1[i].y,P1[i+1].y))\n             &&(multi(P2[i],P1[i+1],P1[i]) * multi(P1[i+1],P2[i+1],P1[i]) >=0)\n             &&(multi(P1[i],P2[i+1],P2[i]) * multi(P2[i+1],P1[i+1],P2[i]) >=0)\n            if(!(max(P1[i].x,P1[i+1].x) >= min(P2[i].x,P2[i+1].x))||!(max(P2[i].x,P2[i+1].x) >= min(P1[i].x,P1[i+1].x))\n             ||!(max(P1[i].y,P1[i+1].y) >= min(P2[i].y,P2[i+1].y))||!(max(P2[i].y,P2[i+1].y) >= min(P1[i].y,P1[i+1].y))\n             ||!(multi(P2[i],P1[i+1],P1[i]) * multi(P1[i+1],P2[i+1],P1[i]) >=0)\n             ||!(multi(P1[i],P2[i+1],P2[i]) * multi(P2[i+1],P1[i+1],P2[i]) >=0))\n            {\n                return false;\n            }\n        }\n    }\n}*/\n\nbool Compl_inside_convex(const Point & p,Point *con,int n)\n{\n    //if(n-eps) return false;\n    //if(cross(con[0],p,con[n-1])1;\n        if(cross(con[0],p,con[mid])>-eps)\n        {\n            line=mid;\n            j=mid-1;\n        }\n        else i=mid+1;\n    }\n    return cross(con[line-1],p,con[line])>n>>m;\n    //int temp1,temp2;\n    for(int i=0; i>P1[i].x>>P1[i].y;\n        //P1[i].x = temp1;\n        //P1[i].y = temp2;\n    }\n    for(int i=0; i>temp1>>temp2;\n        cin>>P2[i].x>>P2[i].y;\n        //P2[i].x = temp1;\n        //P2[i].y = temp2;\n    }\n    convex_hull(P1,P3,n,len1);\n    convex_hull(P2,P4,m,len2);\n    /*if(Intersect(n,m))\n    {\n        cout ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 15:39:53 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 15:40:41 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (12061, '#include\"iostream\"\n#include\"algorithm\"\n#include\"vector\"\n#include\"cmath\"\nusing namespace std;\nint len1;\nint len2;\nstruct Point\n{\n    double x;\n    double y;\n    bool operator= t6)\n            {\n                temp2.x = (p.x + q.x) / 2;\n                temp2.y = (p.y + q.y) / 2;\n                distance2_temp = dist2(p, q) / 2;\n            }\n            else\n            {\n                if (t5 >= t4 && t5 >= t6)\n                {\n                    temp2.x = (P2[i].x + q.x) / 2;\n                    temp2.y = (P2[i].y + q.y) / 2;\n                    distance2_temp = dist2(P2[i], q) / 2;\n                }\n                else\n                {\n                    temp2.x = (P2[i].x + p.x) / 2;\n                    temp2.y = (P2[i].y + p.y) / 2;\n                    distance2_temp = dist2(P2[i], p) / 2;\n                }\n            }\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_One(Point p,int n)\n{\n    temp.x = (p.x+P1[0].x)/2;\n    temp.y = (p.y+P1[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_One(p,P1[j],j-1);\n        }\n    }\n}\n\nvoid NoneOfUselessProcedureOfOnePoint_Two(Point p,int n)\n{\n    temp2.x = (p.x+P2[0].x)/2;\n    temp2.y = (p.y+P2[0].y)/2;\n    distance1_temp = dist2(P1[0],p)/2;\n    for(int j=2; jdistance1_temp)\n        {\n            NoneOfUselessProcedureOfTwoPoint_Two(p,P2[j],j-1);\n        }\n    }\n}\n\nvoid convex_hull(Point *p,Point *ch,int n,int &len)\n{\n    sort(p, p+n);\n    ch[0]=p[0];\n    ch[1]=p[1];\n    int top=1;\n    for(int i=2; i0&&cross(ch[top],p[i],ch[top-1])=0; i--)\n    {\n        while(top>tmp&&cross(ch[top],p[i],ch[top-1]) dist2(ch[p+1],ch[q+1]))\n        {\n            if(ans < dist2(ch[p],ch[q]))\n            {\n                ans = dist2(ch[p],ch[q]);\n                middle.x = (ch[p].x + ch[q].x)/2;\n                middle.y = (ch[p].y + ch[q].y)/2;\n            }\n        }\n        else\n        {\n            if(ans < dist2(ch[p+1],ch[q+1]))\n            {\n                ans = dist2(ch[p+1],ch[q+1]);\n                middle.x = (ch[p+1].x + ch[q+1].x)/2;\n                middle.y = (ch[p+1].y + ch[q+1].y)/2;\n            }\n        }\n    }\n    return ans;\n}\n\ndouble multi(Point p1,Point p2,Point p0)\n{\n    return (p1.x-p0.x) * (p2.y-p0.y) - (p2.x-p0.x) * (p1.y-p0.y);\n}\n\nbool Compl_inside_convex(const Point & p,Point *con,int n)\n{\n    //if(n-eps) return false;\n    //if(cross(con[0],p,con[n-1])1;\n        if(cross(con[0],p,con[mid])>-eps)\n        {\n            line=mid;\n            j=mid-1;\n        }\n        else i=mid+1;\n    }\n    return cross(con[line-1],p,con[line])>n>>m;\n    //int temp1,temp2;\n    for(int i=0; i>P1[i].x>>P1[i].y;\n        //P1[i].x = temp1;\n        //P1[i].y = temp2;\n    }\n    for(int i=0; i>temp1>>temp2;\n        cin>>P2[i].x>>P2[i].y;\n        //P2[i].x = temp1;\n        //P2[i].y = temp2;\n    }\n    convex_hull(P1,P3,n,len1);\n    convex_hull(P2,P4,m,len2);\n    if(n==1&&m==1)\n    {\n        cout ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 15:40:41 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-22 20:36:07 --- EMERGENCY: ErrorException [ 2 ]: htmlspecialchars(): Invalid multibyte sequence in argument ~ SYSPATH/classes/Kohana/HTML.php [ 71 ] in file:line
2016-08-22 20:36:07 --- DEBUG: #0 [internal function]: Kohana_Core::error_handler(2, 'htmlspecialchar...', '/home/OnlineJud...', 71, Array)
#1 /home/OnlineJudge/system/classes/Kohana/HTML.php(71): htmlspecialchars('??a?o??????????...', 3, 'utf-8', true)
#2 /home/OnlineJudge/application/classes/OJ.php(110): Kohana_HTML::chars('??a?o??????????...', true)
#3 /home/OnlineJudge/application/classes/Controller/Base.php(140): OJ::clean_data('??a?o??????????...')
#4 /home/OnlineJudge/application/classes/Controller/Discuss.php(85): Controller_Base->get_query('pid')
#5 /home/OnlineJudge/application/classes/Controller/Discuss.php(12): Controller_Discuss->action_list()
#6 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Discuss->action_index()
#7 [internal function]: Controller_Base->execute()
#8 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Discuss))
#9 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#10 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#11 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#12 {main} in file:line