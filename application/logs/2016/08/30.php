<?php defined('SYSPATH') OR die('No direct script access.'); ?>

2016-08-30 19:03:49 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n   给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n整数序列&nbsp;x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xk&nbsp;被称作 &ldquo;xor序列&rdquo; ，如果序列中每个数&nbsp;xi（1&thinsp;&thinsp;&le;&thinsp;&thinsp;i&thinsp;&thinsp;&le;&thinsp;&thinsp;k&thinsp;-&thinsp;1）的二进制表示存在&nbsp;xi&nbsp;&nbsp;ⓧ &nbsp;xi&thinsp;&thinsp;+&thinsp;&thinsp;1&nbsp;是3的倍数，并且xi&nbsp;&isin;&nbsp;&nbsp;{x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xn}。ⓧ为异或运算。\n       \n求出共有多少个 长度为 k 的&ldquo;xor序列&rdquo;？对结果取模109&thinsp;+&thinsp;7。\n注意：如果序列 a = {1，1}且 k = 1，那么答案是2，因为需要考虑两个 a 是不同的。&nbsp;\n\n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:03:49 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:04:03 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n   给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n&nbsp;\n       \n求出共有多少个 长度为 k 的&ldquo;xor序列&rdquo;？对结果取模109&thinsp;+&thinsp;7。\n注意：如果序列 a = {1，1}且 k = 1，那么答案是2，因为需要考虑两个 a 是不同的。&nbsp;\n\n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:04:03 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:04:43 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n   给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n&nbsp;\n       \n求出共有多少个 长度为 k 的&ldquo;xor序列&rdquo;？对结果取模109&thinsp;+&thinsp;7。\n注意：如果序列 a = {1，1}且 k = 1，那么答案是2，因为需要考虑两个 a 是不同的。&nbsp;\n\n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:04:43 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:05:13 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n整数序列&nbsp;x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xk&nbsp;被称作 &ldquo;xor序列&rdquo; ，如果序列中每个数&nbsp;xi（1&thinsp;&thinsp;&le;&thinsp;&thinsp;i&thinsp;&thinsp;&le;&thinsp;&thinsp;k&thinsp;-&thinsp;1）的二进制表示存在&nbsp;xi&nbsp;&nbsp;ⓧ &nbsp;xi&thinsp;&thinsp;+&thinsp;&thinsp;1&nbsp;是3的倍数，并且xi&nbsp;&isin;&nbsp;&nbsp;{x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xn}。ⓧ为异或运算。\n&nbsp;注意：如果序列 a = {1，1}且 k = 1，那么答案是2，因为需要考虑两个 a 是不同的。\n   \n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:05:13 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:05:28 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n整数序列&nbsp;x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xk&nbsp;被称作 &ldquo;xor序列&rdquo; ，如果序列中每个数&nbsp;xi（1&thinsp;&thinsp;&le;&thinsp;&thinsp;i&thinsp;&thinsp;&le;&thinsp;&thinsp;k&thinsp;-&thinsp;1）的二进制表示存在&nbsp;xi&nbsp;&nbsp;ⓧ &nbsp;xi&thinsp;&thinsp;+&thinsp;&thinsp;1&nbsp;是3的倍数，并且xi&nbsp;&isin;&nbsp;&nbsp;{x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xn}。ⓧ为异或运算。\n&nbsp;注意：如果序列 a = &nbsp;[1，1]&nbsp;且 k = 1，那么答案是2，因为需要考虑两个 a 是不同的。\n   \n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:05:28 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:06:30 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n整数序列&nbsp;x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xk&nbsp;被称作 &ldquo;xor序列&rdquo; ，如果序列中每个数&nbsp;xi（1&thinsp;&thinsp;&le;&thinsp;&thinsp;i&thinsp;&thinsp;&le;&thinsp;&thinsp;k&thinsp;-&thinsp;1）的二进制表示存在&nbsp;xi&nbsp;&nbsp;ⓧ &nbsp;xi&thinsp;&thinsp;+&thinsp;&thinsp;1&nbsp;是3的倍数，并且xi&nbsp;&isin;&nbsp;&nbsp;{x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xn}。ⓧ为异或运算。\n给定注意：如果序列 a = 【 1，1】且k = 1，那么答案是2，因为需要考虑两个a是不同的。\n   \n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:06:30 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:06:39 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ UPDATE `problem` SET `problem_id` = '1054', `title` = 'Xor序列', `description` = '\n给定 n&nbsp;个整数a1,&thinsp;&thinsp;a2,&thinsp;&thinsp;...,&thinsp;&thinsp;an。\n整数序列&nbsp;x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xk&nbsp;被称作 &ldquo;xor序列&rdquo; ，如果序列中每个数&nbsp;xi（1&thinsp;&thinsp;&le;&thinsp;&thinsp;i&thinsp;&thinsp;&le;&thinsp;&thinsp;k&thinsp;-&thinsp;1）的二进制表示存在&nbsp;xi&nbsp;&nbsp;ⓧ &nbsp;xi&thinsp;&thinsp;+&thinsp;&thinsp;1&nbsp;是3的倍数，并且xi&nbsp;&isin;&nbsp;&nbsp;{x1,&thinsp;&thinsp;x2,&thinsp;&thinsp;...,&thinsp;&thinsp;xn}。ⓧ为异或运算。\n给定注意：如果序列且k = 1，那么答案是2，因为需要考虑两个a是不同的。\n   \n\n&nbsp;\n&nbsp;\n', `input` = 'The first line contains two integers&nbsp;n&nbsp;and&nbsp;k&nbsp;(1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;100,&nbsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;1018) &mdash; the number of given integers and the length of the \"xor-sequences\".\n&nbsp;\nThe second line contains&nbsp;n&nbsp;integers&nbsp;ai&nbsp;(0&thinsp;&le;&thinsp;ai&thinsp;&le;&thinsp;1018).', `output` = 'Print the only integer&nbsp;c&nbsp;&mdash; the number of \"xor-sequences\" of length&nbsp;k&nbsp;modulo&nbsp;109&thinsp;+&thinsp;7.', `sample_input` = '第一个例子：\n5 2\n15 1 2 4 8\n第二个例子：\n5 1\n15 1 2 4 8', `sample_output` = '第一个例子：\n13\n第二个例子：\n5', `spj` = 0, `hint` = 'metrics', `source` = 'E 691', `in_date` = '2016-08-30 16:48:26', `time_limit` = '3', `memory_limit` = '256', `defunct` = 'Y', `accepted` = '3', `submit` = '11', `solved` = '0' WHERE `problem_id` = '1054' ] ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 19:06:39 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(3, 'UPDATE `problem...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Base.php(228): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Controller/Admin/Problem.php(38): Model_Base->save()
#3 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Admin_Problem->action_edit()
#4 [internal function]: Controller_Base->execute()
#5 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Admin_Problem))
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#7 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#8 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#9 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 20:15:29 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (13964, 'import java.awt.geom.GeneralPath;\n        import java.util.Arrays;\n        import java.util.Scanner;\n\n        class Point implements Comparable {\n            double x, y;\n\n            public int compareTo(Point p) {\n                if (this.x == p.x) {\n                    return (int) (this.y - p.y);\n                } else {\n                    return (int) (this.x - p.x);\n                }\n            }\n        }\n        public class Main {\n            static double r;//定义半径，最小圆的半径\n            static Point d = new Point();//定义点，圆心\n            static Point[] a = new Point[10000];//定义点集\n            public static void main(String[] args) {\n                Scanner input = new Scanner(System.in);\n                int n = input.nextInt();//克里木族人的要塞Num\n                int m = input.nextInt();//奥洛斯族人要塞Num\n                Point[] kPoint = new Point[n];//克里木族人的要塞Point\n                Point[] aPoint = new Point[m];//奥洛斯族人要塞Point\n\n                //初始化要塞的坐标点\n                for (int i = 0; i < n; i++) {\n                    kPoint[i] = new Point();//注意每次应该初始化坐标点\n                    kPoint[i].x = input.nextInt();\n                    kPoint[i].y = input.nextInt();\n                }\n\n                for (int i = 0; i < m; i++) {\n                    aPoint[i] = new Point();\n                    aPoint[i].x = input.nextInt();\n                    aPoint[i].y = input.nextInt();\n                }\n\n\n                /**\n                 * 1. 1：n或n：1的情况 必定存在这样的一个圆\n                 * 2. 2：n的情况看另一族的点是否都在 void最小外接圆 之外 是则为YES 否则NO\n                 * 3. n：n的情况看 两族的 void凸包 如果凸包\n                 *      相离则圆存在YES\n                 *      相交则为NO\n                 *      包含的情况 如果另外一个族群的要塞在这个被包含的最小外接圆之外则存在YES\n                 *\n                 */\n                if (n == 1 || m == 1) {//1：n或n：1的情况 必定存在这样的一个圆\n                    System.out.println(\"YES\");\n                }else if (n == 2 && m == 2) {//两族人都只有两个点时\n                    Point cricle = new Point();//圆心\n                    double radiu;//半径\n                    boolean bla = true;\n                    boolean blk = true;\n                    //判断a族是否在k族外接圆的圆心\n                    cricle.x = (kPoint[0].x + kPoint[1].x) / 2;//k族圆心\n                    cricle.y = (kPoint[0].y + kPoint[1].y) / 2;\n                    radiu = Dis(kPoint[0], kPoint[1]) / 2;//k族外接圆半径\n                    for (int i = 0; i < m; i++) {\n                        if (Dis(aPoint[i], cricle)  2) {//n：n的情况看 两族的 void凸包 如果凸包 只有三个以上的点才能构成多边形 即才能使用凸包算法\n                    /**\n                     * 3. n：n的情况看 两族的 void凸包 如果凸包\n                     *      相离则圆存在YES\n                     *      相交则为NO\n                     *      包含的情况 如果另外一个族群的要塞在这个被包含的最小外接圆之外则存在YES\n                     */\n\n                    //两个要塞的凸包\n                    Point[] khull = convex_hull(kPoint).clone();\n                    Point[] ahull = convex_hull(aPoint).clone();\n                    int countk = 0;\n                    int counta = 0;\n                    boolean blk = true;\n                    boolean bla = true;\n                    //a是否在k的凸包中\n                    for (int i = 0; i < khull.length; i++) {\n                        if (checkWithJdkGeneralPath(khull[i], ahull)) {\n                            counta++;\n                        }\n                    }\n                    //k是否在a的凸包中\n                    for (int i = 0; i < ahull.length; i++) {\n                        if (checkWithJdkGeneralPath(ahull[i], khull)) {\n                            countk++;\n                        }\n                    }\n                    //两个凸包中都不包含另一个要塞凸包的点，说明两个凸包相离\n                    if (counta == 0 && countk == 0) {\n                        System.out.println(\"YES\");\n                    } else {//k要塞凸包点全在a要塞的凸包内\n                        //如果a要塞的点全在k要塞最小外接圆外 存在YES\n                        for (int i = 0; i < n; i++) {\n                            a[i] = kPoint[i];\n                        }\n                        d.x = (a[0].x + a[1].x) / 2;\n                        d.y = (a[0].y + a[1].y) / 2;\n                        r = Dis(a[0], a[1]) / 2;\n                        for (int i = 2; i < n; i++) {\n                            if (Dis(d, a[i]) = t1 && t2 >= t3) {\n                            d.x = (a[i].x + q.x) / 2;\n                            d.y = (a[i].y + q.y) / 2;\n                            r = Dis(a[i], q) / 2;\n                        } else {\n                            d.x = (a[i].x + p.x) / 2;\n                            d.y = (a[i].y + p.y) / 2;\n                            r = Dis(a[i], p) / 2;\n                        }\n                    }\n                }\n            }\n\n            static void MiniDisWithpointss(Point pi, int n) {//得到最小外接圆的圆心d，半径r\n                d.x = (pi.x + a[0].x) / 2;\n                d.y = (pi.y + a[0].y) / 2;\n                r = Dis(a[0], pi) / 2;\n                int j;\n                for (j = 2; j < n; j++) {\n                    if (Dis(a[j], d)  1) {\n                    int n = P.length, k = 0;\n                    Point[] H = new Point[2 * n];\n                    Arrays.sort(P);\n                    // Build lower hull\n                    for (int i = 0; i < n; ++i) {\n                        while (k >= 2 && cross(H[k - 2], H[k - 1], P[i]) = 0; i--) {\n                        while (k >= t && cross(H[k - 2], H[k - 1], P[i])  1) {\n                        H = Arrays.copyOfRange(H, 0, k - 1); // remove non-hull vertices\n                    }\n                    return H;\n                } else if (P.length  ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 20:15:29 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 20:17:13 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (13966, '\n\n        import java.awt.geom.GeneralPath;\n        import java.util.Arrays;\n        import java.util.Scanner;\n\n \n        class Point implements Comparable {\n            double x, y;\n\n       \n            public int compareTo(Point p) {\n                if (this.x == p.x) {\n                    return (int) (this.y - p.y);\n                } else {\n                    return (int) (this.x - p.x);\n                }\n            }\n        }\n        public class Main{\n            static double r;//定义半径，最小圆的半径\n            static Point d = new Point();//定义点，圆心\n            static Point[] a = new Point[10000];//定义点集\n            public static void main(String[] args) {\n                Scanner input = new Scanner(System.in);\n                int n = input.nextInt();//克里木族人的要塞Num\n                int m = input.nextInt();//奥洛斯族人要塞Num\n                Point[] kPoint = new Point[n];//克里木族人的要塞Point\n                Point[] aPoint = new Point[m];//奥洛斯族人要塞Point\n\n                //初始化要塞的坐标点\n                for (int i = 0; i < n; i++) {\n                    kPoint[i] = new Point();//注意每次应该初始化坐标点\n                    kPoint[i].x = input.nextInt();\n                    kPoint[i].y = input.nextInt();\n                }\n\n                for (int i = 0; i < m; i++) {\n                    aPoint[i] = new Point();\n                    aPoint[i].x = input.nextInt();\n                    aPoint[i].y = input.nextInt();\n                }\n\n\n                /**\n                 * 1. 1：n或n：1的情况 必定存在这样的一个圆\n                 * 2. 2：n的情况看另一族的点是否都在 void最小外接圆 之外 是则为YES 否则NO\n                 * 3. n：n的情况看 两族的 void凸包 如果凸包\n                 *      相离则圆存在YES\n                 *      相交则为NO\n                 *      包含的情况 如果另外一个族群的要塞在这个被包含的最小外接圆之外则存在YES\n                 *\n                 */\n                if (n == 1 || m == 1) {//1：n或n：1的情况 必定存在这样的一个圆\n                    System.out.println(\"YES\");\n                }else if (n == 2 && m == 2) {//两族人都只有两个点时\n                    Point cricle = new Point();//圆心\n                    double radiu;//半径\n                    boolean bla = true;\n                    boolean blk = true;\n                    //判断a族是否在k族外接圆的圆心\n                    cricle.x = (kPoint[0].x + kPoint[1].x) / 2;//k族圆心\n                    cricle.y = (kPoint[0].y + kPoint[1].y) / 2;\n                    radiu = Dis(kPoint[0], kPoint[1]) / 2;//k族外接圆半径\n                    for (int i = 0; i < m; i++) {\n                        if (Dis(aPoint[i], cricle)  2) {//n：n的情况看 两族的 void凸包 如果凸包 只有三个以上的点才能构成多边形 即才能使用凸包算法\n                    /**\n                     * 3. n：n的情况看 两族的 void凸包 如果凸包\n                     *      相离则圆存在YES\n                     *      相交则为NO\n                     *      包含的情况 如果另外一个族群的要塞在这个被包含的最小外接圆之外则存在YES\n                     */\n\n                    //两个要塞的凸包\n                    Point[] khull = convex_hull(kPoint).clone();\n                    Point[] ahull = convex_hull(aPoint).clone();\n                    int countk = 0;\n                    int counta = 0;\n                    boolean blk = true;\n                    boolean bla = true;\n                    //a是否在k的凸包中\n                    for (int i = 0; i < khull.length; i++) {\n                        if (checkWithJdkGeneralPath(khull[i], ahull)) {\n                            counta++;\n                        }\n                    }\n                    //k是否在a的凸包中\n                    for (int i = 0; i < ahull.length; i++) {\n                        if (checkWithJdkGeneralPath(ahull[i], khull)) {\n                            countk++;\n                        }\n                    }\n                    //两个凸包中都不包含另一个要塞凸包的点，说明两个凸包相离\n                    if (counta == 0 && countk == 0) {\n                        System.out.println(\"YES\");\n                    } else {//k要塞凸包点全在a要塞的凸包内\n                        //如果a要塞的点全在k要塞最小外接圆外 存在YES\n                        for (int i = 0; i < n; i++) {\n                            a[i] = kPoint[i];\n                        }\n                        d.x = (a[0].x + a[1].x) / 2;\n                        d.y = (a[0].y + a[1].y) / 2;\n                        r = Dis(a[0], a[1]) / 2;\n                        for (int i = 2; i < n; i++) {\n                            if (Dis(d, a[i]) = t1 && t2 >= t3) {\n                            d.x = (a[i].x + q.x) / 2;\n                            d.y = (a[i].y + q.y) / 2;\n                            r = Dis(a[i], q) / 2;\n                        } else {\n                            d.x = (a[i].x + p.x) / 2;\n                            d.y = (a[i].y + p.y) / 2;\n                            r = Dis(a[i], p) / 2;\n                        }\n                    }\n                }\n            }\n\n            static void MiniDisWithpointss(Point pi, int n) {//得到最小外接圆的圆心d，半径r\n                d.x = (pi.x + a[0].x) / 2;\n                d.y = (pi.y + a[0].y) / 2;\n                r = Dis(a[0], pi) / 2;\n                int j;\n                for (j = 2; j < n; j++) {\n                    if (Dis(a[j], d)  1) {\n                    int n = P.length, k = 0;\n                    Point[] H = new Point[2 * n];\n                    Arrays.sort(P);\n                    // Build lower hull\n                    for (int i = 0; i < n; ++i) {\n                        while (k >= 2 && cross(H[k - 2], H[k - 1], P[i]) = 0; i--) {\n                        while (k >= t && cross(H[k - 2], H[k - 1], P[i])  1) {\n                        H = Arrays.copyOfRange(H, 0, k - 1); // remove non-hull vertices\n                    }\n                    return H;\n                } else if (P.length  ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-30 20:17:13 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251