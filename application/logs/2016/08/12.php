<?php defined('SYSPATH') OR die('No direct script access.'); ?>

2016-08-12 15:31:29 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (9659, 'import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]) {\n        double tempx, tempy;\n        double x_min = 0, x_max = 0, y_min = 0, y_max = 0;\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int m = scan.nextInt();\n        if(n>=3){\n            x_min = scan.nextDouble();\n            x_max = x_min;\n            y_min = scan.nextDouble();\n            y_max = y_min;\n            double map_up_min[] = { x_min,y_max};\n            double map_up_max[] = { x_max,y_max};\n            double map_down_min[] = {x_min,y_min};\n            double map_down_max[] = {x_max,y_min};\n            double map_left_min[] = {x_min, y_min};\n            double map_left_max[] = {x_min, y_max};\n            double map_right_min[] = {x_max, y_min};\n            double map_right_max[] = {x_max, y_max};\n            for (int i = 1; i < n; i++) {\n                tempx = scan.nextDouble();\n                tempy = scan.nextDouble();\n                if (tempx < x_min) {\n                    x_min = tempx;\n                    map_left_min[0] = x_min;\n                    map_left_min[1] = tempy;\n                    map_left_max[0] = x_min;\n                    map_left_max[1] = tempy;\n                }\n                else if (tempx == x_min) {\n                    if(tempy < map_left_min[1]){\n                        map_left_min[1] = tempy;\n                    }\n                    else if(tempy > map_left_max[1]){\n                        map_left_max[1] = tempy;\n                    }\n                }\n                if (tempx > x_max) {\n                    x_max = tempx;\n                    map_right_min[0] = x_max;\n                    map_right_min[1] = tempy;\n                    map_right_max[0] = x_max;\n                    map_right_max[1] = tempy;\n                }\n                else if (tempx == x_max) {\n                    if(tempy < map_right_min[1]){\n                        map_right_min[1] = tempy;\n                    }\n                    else if(tempy > map_right_max[1]){\n                        map_right_max[1] = tempy;\n                    }\n                }\n                if (tempy < y_min) {\n                    y_min = tempy;\n                    map_down_min[1] = y_min;\n                    map_down_min[0] = tempx;\n                    map_down_max[1] = y_min;\n                    map_down_max[0] = tempx;\n                }\n                else if (tempy == y_min) {\n                    if(tempx < map_down_min[0]){\n                        map_down_min[0] = tempx;\n                    }\n                    else if(tempx > map_down_max[0]){\n                        map_down_max[0] = tempx;\n                    }\n                }\n                if (tempy > y_max) {\n                    y_max = tempy;\n                    map_up_min[1] = y_max;\n                    map_up_min[0] = tempx;\n                    map_up_max[1] = y_max;\n                    map_up_max[0] = tempx;\n                }\n                else if (tempy == y_max) {\n                    if(tempx < map_up_min[0]){\n                        map_up_min[0] = tempx;\n                    }\n                    else if(tempx > map_up_max[0]){\n                        map_up_max[0] = tempx;\n                    }\n                }\n            }\n            double point[] = new double[16];\n            point[0] = map_up_min[0];\n            point[1] = map_up_min[1];\n            point[2] = map_up_max[0];\n            point[3] = map_up_max[1];\n            point[4] = map_right_max[0];\n            point[5] = map_right_max[1];\n            point[6] = map_right_min[0];\n            point[7] = map_right_min[1];\n            point[8] = map_down_max[0];\n            point[9] = map_down_max[1];\n            point[10] = map_down_min[0];\n            point[11] = map_down_min[1];\n            point[12] = map_left_min[0];\n            point[13] = map_left_min[1];\n            point[14] = map_left_max[0];\n            point[15] = map_left_max[1];\n\n            double distances[] = new double[8];\n            distances[0] = distance(x_min,y_max,point[0],point[1]);\n            distances[1] = distance(x_max,y_max,point[2],point[3]);\n            distances[2] = distance(x_max,y_max,point[4],point[5]);\n            distances[3] = distance(x_max,y_min,point[6],point[7]);\n            distances[4] = distance(x_max,y_min,point[8],point[9]);\n            distances[5] = distance(x_min,y_min,point[10],point[11]);\n            distances[6] = distance(x_min,y_min,point[12],point[13]);\n            distances[7] = distance(x_min,y_max,point[14],point[15]);\n            double temp[] = new double[8];\n            for (int i=0;i ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-12 15:31:29 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-12 15:31:39 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (9660, 'import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]) {\n        double tempx, tempy;\n        double x_min = 0, x_max = 0, y_min = 0, y_max = 0;\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int m = scan.nextInt();\n        if(n>=3){\n            x_min = scan.nextDouble();\n            x_max = x_min;\n            y_min = scan.nextDouble();\n            y_max = y_min;\n            double map_up_min[] = { x_min,y_max};\n            double map_up_max[] = { x_max,y_max};\n            double map_down_min[] = {x_min,y_min};\n            double map_down_max[] = {x_max,y_min};\n            double map_left_min[] = {x_min, y_min};\n            double map_left_max[] = {x_min, y_max};\n            double map_right_min[] = {x_max, y_min};\n            double map_right_max[] = {x_max, y_max};\n            for (int i = 1; i < n; i++) {\n                tempx = scan.nextDouble();\n                tempy = scan.nextDouble();\n                if (tempx < x_min) {\n                    x_min = tempx;\n                    map_left_min[0] = x_min;\n                    map_left_min[1] = tempy;\n                    map_left_max[0] = x_min;\n                    map_left_max[1] = tempy;\n                }\n                else if (tempx == x_min) {\n                    if(tempy < map_left_min[1]){\n                        map_left_min[1] = tempy;\n                    }\n                    else if(tempy > map_left_max[1]){\n                        map_left_max[1] = tempy;\n                    }\n                }\n                if (tempx > x_max) {\n                    x_max = tempx;\n                    map_right_min[0] = x_max;\n                    map_right_min[1] = tempy;\n                    map_right_max[0] = x_max;\n                    map_right_max[1] = tempy;\n                }\n                else if (tempx == x_max) {\n                    if(tempy < map_right_min[1]){\n                        map_right_min[1] = tempy;\n                    }\n                    else if(tempy > map_right_max[1]){\n                        map_right_max[1] = tempy;\n                    }\n                }\n                if (tempy < y_min) {\n                    y_min = tempy;\n                    map_down_min[1] = y_min;\n                    map_down_min[0] = tempx;\n                    map_down_max[1] = y_min;\n                    map_down_max[0] = tempx;\n                }\n                else if (tempy == y_min) {\n                    if(tempx < map_down_min[0]){\n                        map_down_min[0] = tempx;\n                    }\n                    else if(tempx > map_down_max[0]){\n                        map_down_max[0] = tempx;\n                    }\n                }\n                if (tempy > y_max) {\n                    y_max = tempy;\n                    map_up_min[1] = y_max;\n                    map_up_min[0] = tempx;\n                    map_up_max[1] = y_max;\n                    map_up_max[0] = tempx;\n                }\n                else if (tempy == y_max) {\n                    if(tempx < map_up_min[0]){\n                        map_up_min[0] = tempx;\n                    }\n                    else if(tempx > map_up_max[0]){\n                        map_up_max[0] = tempx;\n                    }\n                }\n            }\n            double point[] = new double[16];\n            point[0] = map_up_min[0];\n            point[1] = map_up_min[1];\n            point[2] = map_up_max[0];\n            point[3] = map_up_max[1];\n            point[4] = map_right_max[0];\n            point[5] = map_right_max[1];\n            point[6] = map_right_min[0];\n            point[7] = map_right_min[1];\n            point[8] = map_down_max[0];\n            point[9] = map_down_max[1];\n            point[10] = map_down_min[0];\n            point[11] = map_down_min[1];\n            point[12] = map_left_min[0];\n            point[13] = map_left_min[1];\n            point[14] = map_left_max[0];\n            point[15] = map_left_max[1];\n\n            double distances[] = new double[8];\n            distances[0] = distance(x_min,y_max,point[0],point[1]);\n            distances[1] = distance(x_max,y_max,point[2],point[3]);\n            distances[2] = distance(x_max,y_max,point[4],point[5]);\n            distances[3] = distance(x_max,y_min,point[6],point[7]);\n            distances[4] = distance(x_max,y_min,point[8],point[9]);\n            distances[5] = distance(x_min,y_min,point[10],point[11]);\n            distances[6] = distance(x_min,y_min,point[12],point[13]);\n            distances[7] = distance(x_min,y_max,point[14],point[15]);\n            double temp[] = new double[8];\n            for (int i=0;i ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-12 15:31:39 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-12 15:31:46 --- EMERGENCY: Database_Exception [ 1153 ]: Got a packet bigger than 'max_allowed_packet' bytes [ INSERT INTO `source_code` (`solution_id`, `source`) VALUES (9661, 'import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]) {\n        double tempx, tempy;\n        double x_min = 0, x_max = 0, y_min = 0, y_max = 0;\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int m = scan.nextInt();\n        if(n>=3){\n            x_min = scan.nextDouble();\n            x_max = x_min;\n            y_min = scan.nextDouble();\n            y_max = y_min;\n            double map_up_min[] = { x_min,y_max};\n            double map_up_max[] = { x_max,y_max};\n            double map_down_min[] = {x_min,y_min};\n            double map_down_max[] = {x_max,y_min};\n            double map_left_min[] = {x_min, y_min};\n            double map_left_max[] = {x_min, y_max};\n            double map_right_min[] = {x_max, y_min};\n            double map_right_max[] = {x_max, y_max};\n            for (int i = 1; i < n; i++) {\n                tempx = scan.nextDouble();\n                tempy = scan.nextDouble();\n                if (tempx < x_min) {\n                    x_min = tempx;\n                    map_left_min[0] = x_min;\n                    map_left_min[1] = tempy;\n                    map_left_max[0] = x_min;\n                    map_left_max[1] = tempy;\n                }\n                else if (tempx == x_min) {\n                    if(tempy < map_left_min[1]){\n                        map_left_min[1] = tempy;\n                    }\n                    else if(tempy > map_left_max[1]){\n                        map_left_max[1] = tempy;\n                    }\n                }\n                if (tempx > x_max) {\n                    x_max = tempx;\n                    map_right_min[0] = x_max;\n                    map_right_min[1] = tempy;\n                    map_right_max[0] = x_max;\n                    map_right_max[1] = tempy;\n                }\n                else if (tempx == x_max) {\n                    if(tempy < map_right_min[1]){\n                        map_right_min[1] = tempy;\n                    }\n                    else if(tempy > map_right_max[1]){\n                        map_right_max[1] = tempy;\n                    }\n                }\n                if (tempy < y_min) {\n                    y_min = tempy;\n                    map_down_min[1] = y_min;\n                    map_down_min[0] = tempx;\n                    map_down_max[1] = y_min;\n                    map_down_max[0] = tempx;\n                }\n                else if (tempy == y_min) {\n                    if(tempx < map_down_min[0]){\n                        map_down_min[0] = tempx;\n                    }\n                    else if(tempx > map_down_max[0]){\n                        map_down_max[0] = tempx;\n                    }\n                }\n                if (tempy > y_max) {\n                    y_max = tempy;\n                    map_up_min[1] = y_max;\n                    map_up_min[0] = tempx;\n                    map_up_max[1] = y_max;\n                    map_up_max[0] = tempx;\n                }\n                else if (tempy == y_max) {\n                    if(tempx < map_up_min[0]){\n                        map_up_min[0] = tempx;\n                    }\n                    else if(tempx > map_up_max[0]){\n                        map_up_max[0] = tempx;\n                    }\n                }\n            }\n            double point[] = new double[16];\n            point[0] = map_up_min[0];\n            point[1] = map_up_min[1];\n            point[2] = map_up_max[0];\n            point[3] = map_up_max[1];\n            point[4] = map_right_max[0];\n            point[5] = map_right_max[1];\n            point[6] = map_right_min[0];\n            point[7] = map_right_min[1];\n            point[8] = map_down_max[0];\n            point[9] = map_down_max[1];\n            point[10] = map_down_min[0];\n            point[11] = map_down_min[1];\n            point[12] = map_left_min[0];\n            point[13] = map_left_min[1];\n            point[14] = map_left_max[0];\n            point[15] = map_left_max[1];\n\n            double distances[] = new double[8];\n            distances[0] = distance(x_min,y_max,point[0],point[1]);\n            distances[1] = distance(x_max,y_max,point[2],point[3]);\n            distances[2] = distance(x_max,y_max,point[4],point[5]);\n            distances[3] = distance(x_max,y_min,point[6],point[7]);\n            distances[4] = distance(x_max,y_min,point[8],point[9]);\n            distances[5] = distance(x_min,y_min,point[10],point[11]);\n            distances[6] = distance(x_min,y_min,point[12],point[13]);\n            distances[7] = distance(x_min,y_max,point[14],point[15]);\n            double temp[] = new double[8];\n            for (int i=0;i ~ MODPATH/database/classes/Kohana/Database/MySQLi.php [ 171 ] in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251
2016-08-12 15:31:46 --- DEBUG: #0 /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php(251): Kohana_Database_MySQLi->query(2, 'INSERT INTO `so...', false, Array)
#1 /home/OnlineJudge/application/classes/Model/Save.php(29): Kohana_Database_Query->execute()
#2 /home/OnlineJudge/application/classes/Model/Solution.php(398): Model_Save->save()
#3 /home/OnlineJudge/application/classes/Controller/Problem.php(112): Model_Solution->save()
#4 /home/OnlineJudge/application/classes/Controller/Base.php(253): Controller_Problem->action_submit()
#5 [internal function]: Controller_Base->execute()
#6 /home/OnlineJudge/system/classes/Kohana/Request/Client/Internal.php(97): ReflectionMethod->invoke(Object(Controller_Problem))
#7 /home/OnlineJudge/system/classes/Kohana/Request/Client.php(114): Kohana_Request_Client_Internal->execute_request(Object(Request), Object(Response))
#8 /home/OnlineJudge/system/classes/Kohana/Request.php(995): Kohana_Request_Client->execute(Object(Request))
#9 /home/OnlineJudge/index.php(103): Kohana_Request->execute()
#10 {main} in /home/OnlineJudge/modules/database/classes/Kohana/Database/Query.php:251